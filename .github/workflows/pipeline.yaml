name: Tagmania üêç publish to PyPI

on:
  push:
    branches:
      - 'main'
      - 'dev'
    tags-ignore:
      - 'v*'

env:
  PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
  PYPI_TEST_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
  GH_REPO: ${{ github.repository }}
  GH_ACCOUNT: ${{ github.repository_owner }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:

  publish-release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    name: Publish to PyPi
#    needs: [run-tests]
    outputs:
      tag: ${{ steps.bump.outputs.tag }}
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
#          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

        #----------------------------------------------
        #  -----  install & configure poetry  -----
        #----------------------------------------------
      - name: Install Poetry

        uses: snok/install-poetry@v1
        with:
          version: 2.1.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: debug
        run: |
          echo "Poetry version: $(poetry --version)"
          echo "Python version: $(python --version)"
          echo "Poetry config: $(poetry config --list)"

        #----------------------------------------------
        #       load cached venv if cache exists
        #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
#        #----------------------------------------------
#        # install dependencies if cache does not exist
#        #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
#        #----------------------------------------------
#        # install your root project, if required
#        #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction

      - name: Run python-semantic-release
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: poetry run semantic-release publish

#      - uses: bjoluc/semantic-release-config-poetry@v2.2.0
#        with:
#          pypi_token: ${{ secrets.PYPI_TOKEN }}
#          release_branch: ${{ github.ref_name }}
#          github_token: ${{ secrets.GH_TOKEN }}


      - name: Show inputs to next workflow
        run: |
          echo "Inputs to next workflow"
          echo "version: ${{ steps.bump.outputs.tag }}"
          echo "gh_token: ${{ secrets.GH_TOKEN }}"
          env
