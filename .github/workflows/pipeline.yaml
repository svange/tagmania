name: Tagmania üêç publish to PyPI

on:
  push:
    branches:
      - 'main'
      - 'dev'
    tags-ignore:
      - 'v*'

env:
  PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
  PYPI_TEST_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
  GH_REPO: ${{ github.repository }}
  GH_ACCOUNT: ${{ github.repository_owner }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  release:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false

    permissions:
      contents: write  # needed for commit, tag, release creation

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Force branch to workflow SHA
        run: git reset --hard ${{ github.sha }}

      - name: Verify upstream has NOT changed
        shell: bash
        run: |
          set +o pipefail
          UPSTREAM_BRANCH_NAME="$(git status -sb | head -n1 | cut -d' ' -f2 | grep -E '\.{3}' | cut -d'.' -f4)"
          if [ -z "$UPSTREAM_BRANCH_NAME" ]; then
            echo "::error::Unable to determine upstream branch name!"
            exit 1
          fi
          git fetch "${UPSTREAM_BRANCH_NAME%%/*}"
          UPSTREAM_SHA="$(git rev-parse "$UPSTREAM_BRANCH_NAME")"
          if [ "$(git rev-parse HEAD)" != "$UPSTREAM_SHA" ]; then
            echo "::error::Upstream has changed, aborting release..."
            exit 1
          fi

      - name: Semantic Version Release
        id: release
        uses: python-semantic-release/python-semantic-release@v10.2.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: github-actions
          git_committer_email: actions@users.noreply.github.com

      - name: Upload artifacts to GitHub Release
        uses: python-semantic-release/publish-action@v10.2.0
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}

      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distribution-artifacts
          path: dist
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: release
    if: ${{ needs.release.outputs.released == 'true' }}

    permissions:
      contents: read
      id-token: write  # needed for PyPI trusted publisher flow

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: distribution-artifacts
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1  # replace with latest tag or commit hash
        with:
          packages-dir: dist
          print-hash: true
          verbose: true
