name: Python üêç CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main

env:
  # Vars from .env file or GitHub Environment
  TESTING_REGION: ${{ vars.TESTING_REGION }}
  TESTING_ARTIFACTS_BUCKET: ${{ vars.TESTING_ARTIFACTS_BUCKET }}
  TESTING_CLOUDFORMATION_EXECUTION_ROLE: ${{ vars.TESTING_CLOUDFORMATION_EXECUTION_ROLE }}
  TESTING_PIPELINE_EXECUTION_ROLE: ${{ vars.TESTING_PIPELINE_EXECUTION_ROLE }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  # Secrets from .env file or GitHub Secrets
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

  # For Pipeline Only
  MODULE_NAME: ${{ vars.MODULE_NAME }}
  PYTHON_VERSION: ${{ vars.PYTHON_VERSION }}
  # Use run number and attempt to make stack name unique and avoid collisions
  TESTING_STACK_NAME: ${{ github.event.repository.name }}-testing-${{ github.run_number }}-${{ github.run_attempt }}


# default: least privileged permissions across all jobs
permissions:
  contents: read

jobs:
  run-pre-commit-tests:
    name: Enforce commit standards
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install pre-commit
        run: |
          pip install pre-commit

      - name: Run pre-commit hooks
        run: |
          pre-commit run --all-files --show-diff-on-failure

  security-scan:
    name: Security scanning
    runs-on: ubuntu-latest
    needs: [run-pre-commit-tests]
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-security-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with security

      - name: Install project
        run: poetry install --no-interaction --with security

      - name: Generate Bandit report
        run: |
          poetry run bandit -r src/ -f json -o bandit-report.json || echo '{"errors": [], "results": [], "metrics": {"_totals": {"nosec": 0, "skipped_tests": 0}}}' > bandit-report.json
        continue-on-error: true

      - name: Run Bandit security scan (enforced)
        run: |
          poetry run bandit -r src/ -ll  # Only fail on medium and high severity issues

      - name: Generate Safety report
        run: |
          # Safety can output HTML instead of JSON in some cases, so we handle both
          poetry run safety check --json --output safety-report.json || echo '{"vulnerabilities": [], "scan_type": "safety", "error": "Safety scan completed with no vulnerabilities or failed to generate JSON"}' > safety-report.json
        continue-on-error: true

      - name: Run Safety check (enforced)
        run: |
          poetry run safety check

      - name: Generate pip-audit report
        run: |
          poetry run pip-audit --desc --format json --output pip-audit-report.json || echo '{"dependencies": [], "vulnerabilities": []}' > pip-audit-report.json
        continue-on-error: true

      - name: Run pip-audit (enforced)
        run: |
          poetry run pip-audit --desc

      - name: Generate Semgrep report
        run: |
          poetry run semgrep --config=auto --json --output=semgrep-report.json src/ || echo '{"results": [], "errors": []}' > semgrep-report.json
        continue-on-error: true

      - name: Run Semgrep scan (enforced)
        run: |
          poetry run semgrep --config=auto src/

      - name: Generate HTML reports from JSON
        run: |
          # Create a simple HTML wrapper for JSON reports
          cat > security-reports.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Security Scan Results</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 20px; background: #0d1117; color: #c9d1d9; }
                  .report { margin: 20px 0; padding: 15px; border: 1px solid #30363d; border-radius: 8px; background: #161b22; }
                  .report h2 { color: #58a6ff; margin-top: 0; }
                  pre { background: #0d1117; padding: 10px; border-radius: 4px; overflow-x: auto; border: 1px solid #30363d; }
                  .error { color: #ff7b72; }
                  .warning { color: #ffa657; }
                  .info { color: #79c0ff; }
              </style>
          </head>
          <body>
              <h1>Security Scan Results</h1>

              <div class="report">
                  <h2>üîç Bandit Security Scan</h2>
                  <p>Python security issues detected by Bandit:</p>
                  <pre id="bandit-content">Loading...</pre>
              </div>

              <div class="report">
                  <h2>üö® Safety Vulnerability Check</h2>
                  <p>Known vulnerabilities in dependencies:</p>
                  <pre id="safety-content">Loading...</pre>
              </div>

              <div class="report">
                  <h2>üîß Pip-Audit Results</h2>
                  <p>Package vulnerability audit:</p>
                  <pre id="audit-content">Loading...</pre>
              </div>

              <div class="report">
                  <h2>üéØ Semgrep Analysis</h2>
                  <p>Static code analysis findings:</p>
                  <pre id="semgrep-content">Loading...</pre>
              </div>

              <script>
                  // Load and display JSON reports
                  const reports = [
                      {id: 'bandit-content', file: 'bandit-report.json'},
                      {id: 'safety-content', file: 'safety-report.json'},
                      {id: 'audit-content', file: 'pip-audit-report.json'},
                      {id: 'semgrep-content', file: 'semgrep-report.json'}
                  ];

                  reports.forEach(report => {
                      fetch(report.file)
                          .then(response => response.json())
                          .then(data => {
                              document.getElementById(report.id).textContent = JSON.stringify(data, null, 2);
                          })
                          .catch(error => {
                              document.getElementById(report.id).textContent = 'Error loading report: ' + error;
                              document.getElementById(report.id).className = 'error';
                          });
                  });
              </script>
          </body>
          </html>
          EOF
        continue-on-error: true

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json
            semgrep-report.json
            security-reports.html

  deploy-infrastructure:
    permissions:
      id-token: write
      contents: read

    name: Deploy test infrastructure (if template.yaml exists)
    runs-on: ubuntu-latest
    needs: [security-scan]

    steps:
      - uses: actions/checkout@v4

      - name: Check for SAM template
        id: check_template
        run: |
          if [ -f template.yaml ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi


      - name: Set up SAM CLI
        if: steps.check_template.outputs.exists == 'true'
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Build resources
        if: steps.check_template.outputs.exists == 'true'
        run: sam build --use-container

      - name: Assume pipeline role
        if: steps.check_template.outputs.exists == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          aws-region: ${{ env.TESTING_REGION }}
          role-session-name: testing-infra
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Package artifacts
        if: steps.check_template.outputs.exists == 'true'
        run: |
          sam package \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
            --region ${TESTING_REGION} \
            --output-template-file packaged-testing.yaml

      - name: Validate packaged template
        if: steps.check_template.outputs.exists == 'true'
        run: sam validate --lint -t packaged-testing.yaml

      - uses: actions/upload-artifact@v4
        if: steps.check_template.outputs.exists == 'true'
        with:
          name: packaged-testing.yaml
          path: packaged-testing.yaml

      - name: Clean up any existing stack in bad state
        if: steps.check_template.outputs.exists == 'true'
        continue-on-error: true
        run: |
          # Check if stack exists and its status
          STACK_STATUS=$(aws cloudformation describe-stacks \
            --stack-name ${TESTING_STACK_NAME} \
            --region ${TESTING_REGION} \
            --query 'Stacks[0].StackStatus' \
            --output text 2>/dev/null || echo "DOES_NOT_EXIST")

          if [[ "$STACK_STATUS" == "DELETE_IN_PROGRESS" || "$STACK_STATUS" == "DELETE_FAILED" ]]; then
            echo "Stack is in $STACK_STATUS state, waiting for deletion to complete..."
            aws cloudformation wait stack-delete-complete \
              --stack-name ${TESTING_STACK_NAME} \
              --region ${TESTING_REGION} || true
          elif [[ "$STACK_STATUS" == "ROLLBACK_COMPLETE" || "$STACK_STATUS" == "ROLLBACK_FAILED" || "$STACK_STATUS" == "CREATE_FAILED" || "$STACK_STATUS" == "UPDATE_ROLLBACK_COMPLETE" ]]; then
            echo "Stack is in $STACK_STATUS state, deleting it first..."
            aws cloudformation delete-stack \
              --stack-name ${TESTING_STACK_NAME} \
              --region ${TESTING_REGION}
            aws cloudformation wait stack-delete-complete \
              --stack-name ${TESTING_STACK_NAME} \
              --region ${TESTING_REGION} || true
          fi

      - name: Deploy stack
        if: steps.check_template.outputs.exists == 'true'
        run: |
          # Extract role name from ARN
          PIPELINE_ROLE_NAME=${TESTING_PIPELINE_EXECUTION_ROLE##*/}

          sam deploy \
            --stack-name ${TESTING_STACK_NAME} \
            --template-file packaged-testing.yaml \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --region ${TESTING_REGION} \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE} \
            --parameter-overrides PipelineExecutionRoleName=${PIPELINE_ROLE_NAME}



  run-tests:
    permissions:
      id-token: write
      contents: read

    name: Run pytest CI/CD tests
    needs: [security-scan, deploy-infrastructure]
    strategy:
      matrix:
        #        python-version: [ "3.10", "3.11" ]
        python-version: [ "3.12" ]
        platform: [ ubuntu-latest ]
    runs-on: ${{ matrix.platform }}

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up AWS OIDC credentials for pipeline
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          aws-region: ${{ env.TESTING_REGION }}
          role-session-name: testing-pipeline
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
        #----------------------------------------------
        #  -----  install & configure poetry  -----
        #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

        #----------------------------------------------
        #       load cached venv if cache exists
        #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-docs-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        #----------------------------------------------
        # install dependencies if cache does not exist
        #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
        #----------------------------------------------
        # install your root project, if required
        #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction


        #----------------------------------------------
        #              run test suite
        #----------------------------------------------
      - name: Test with pytest
        run: |
          env
          poetry run pytest -m ""

      - name: upload test output
        if: |
          ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-output
          path: pytest.log


      - name: upload pretty test results
        if: |
          ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-html
          path: test-report.html

      - name: Skip tests if release commit
        run: echo "Skipping tests for release commit"

  cleanup-infrastructure:
    permissions:
      id-token: write
      contents: read

    name: Cleanup test infrastructure
    needs: run-tests
    if: success()
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Assume pipeline role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          aws-region: ${{ env.TESTING_REGION }}
          role-session-name: cleanup-infra
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Delete stack
        run: |
          echo "Deleting test infrastructure stack to save costs..."
          sam delete \
            --stack-name ${TESTING_STACK_NAME} \
            --region ${TESTING_REGION} \
            --no-prompts \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} || echo "Stack may not exist or already deleted"

  release-version:
    needs: [ run-pre-commit-tests, security-scan, run-tests ]
    name: Semantic Version Release
    runs-on: ubuntu-latest
    # Only run semantic release on push to main or dev branches, not on PRs
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') }}
    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false

    permissions:
      contents: write

    steps:
      # Note: We checkout the repository at the branch that triggered the workflow
      # with the entire history to ensure to match PSR's release branch detection
      # and history evaluation.
      # However, we forcefully reset the branch to the workflow sha because it is
      # possible that the branch was updated while the workflow was running. This
      # prevents accidentally releasing un-evaluated changes.
      - name: Setup | Checkout Repository on Release Branch
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Setup | Force release branch to be at workflow sha
        run: |
          git reset --hard ${{ github.sha }}
        #----------------------------------------------
        #  -----  install & configure python  -----
        #----------------------------------------------
      - name: Setup | Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
        #----------------------------------------------
        #  -----  install & configure poetry  -----
        #----------------------------------------------
      - name: Setup | Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
        #----------------------------------------------
        #       load cached venv if cache exists
        #----------------------------------------------
      - name: Setup | Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        #----------------------------------------------
        # install dependencies if cache does not exist
        #----------------------------------------------
      - name: Setup | Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
        #----------------------------------------------
        # install your root project, if required
        #----------------------------------------------
      - name: Setup | Install project
        run: poetry install --no-interaction
        #----------------------------------------------
        # Final safety check before running the release
        #----------------------------------------------
      - name: Evaluate | Verify upstream has NOT changed
        # Last chance to abort before causing an error as another PR/push was applied to
        # the upstream branch while this workflow was running. This is important
        # because we are committing a version change (--commit).
        shell: bash
        run: |
          set +o pipefail

          UPSTREAM_BRANCH_NAME="$(git status -sb | head -n 1 | cut -d' ' -f2 | grep -E '\.{3}' | cut -d'.' -f4)"
          printf '%s\n' "Upstream branch name: $UPSTREAM_BRANCH_NAME"

          set -o pipefail

          if [ -z "$UPSTREAM_BRANCH_NAME" ]; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch name!"
              exit 1
          fi

          git fetch "${UPSTREAM_BRANCH_NAME%%/*}"

          if ! UPSTREAM_SHA="$(git rev-parse "$UPSTREAM_BRANCH_NAME")"; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch sha!"
              exit 1
          fi

          HEAD_SHA="$(git rev-parse HEAD)"

          if [ "$HEAD_SHA" != "$UPSTREAM_SHA" ]; then
              printf >&2 '%s\n' "[HEAD SHA] $HEAD_SHA != $UPSTREAM_SHA [UPSTREAM SHA]"
              printf >&2 '%s\n' "::error::Upstream has changed, aborting release..."
              exit 1
          fi

          printf '%s\n' "Verified upstream branch has not changed, continuing with release..."


      - name: Action | Semantic Version Release
        run: |
          # Run semantic release to bump the version, update the changelog, commit the change, and create a tag.
          poetry run semantic-release -v version

      - name: Publish | Upload to GitHub Release Assets
        uses: python-semantic-release/publish-action@v10.2.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}

      - name: Upload | Distribution Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distribution-artifacts
          path: dist
          if-no-files-found: error

  generate-and-deploy-docs-site:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    name: Generate documentation, gather test results and changelog, and deploy to GitHub Pages
    needs: release-version
    runs-on: ubuntu-latest
    permissions:
      contents: write  # for gh-pages push

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
        #----------------------------------------------
        #  -----  install & configure poetry  -----
        #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

        #----------------------------------------------
        #       load cached venv if cache exists
        #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-docs-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        #----------------------------------------------
        # install dependencies if cache does not exist
        #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
        #----------------------------------------------
        # install your root project, if required
        #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction
        #----------------------------------------------
        #              run test suite
        #----------------------------------------------

      - name: Generate documentation
        run: |
          poetry run pdoc ${{ env.MODULE_NAME }} --output-dir docs

      - name: Download test HTML report artifact
        uses: actions/download-artifact@v4
        with:
          name: test-html
          path: docs

      - name: Deploy docs to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages

  publish-to-pypi:
    needs: release-version
    # 1. Separate out the publish to pypi step from the publish to github step to run each step at
    #    the least amount of token privilege and to use github's artifact system to store the release
    # 2. Also, deployments can fail, and its better to have a separate job if you need to retry
    #    and it won't require reversing the release.
    name: Upload release to PyPI or TestPyPI
    runs-on: ubuntu-latest
    # Only run on push to main or dev branches, not on PRs
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') }}
    environment:
      name: pypi
      url: https://pypi.org/p/${{ github.event.repository.name }}
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - name: Setup | Download Build Artifacts
        uses: actions/download-artifact@v4
        id: artifact-download
        with:
          name: distribution-artifacts
          path: dist/

      - name: Publish package distributions to PyPI Test
        if: github.ref == 'refs/heads/dev'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

      - name: Publish package distributions to PyPI
        if: github.ref == 'refs/heads/main'
        uses: pypa/gh-action-pypi-publish@release/v1
